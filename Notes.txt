Java	

--> Lenguaje de programación fuertemente tipado
--> Orientado a Objetos
--> Utilizado en grandes compañías (empresarial)
--> 2 versiones:
	- JSE: Java Standar Edition
	- JEE: Java Enterprise Edition (Igual a Jakarta Enterprise Edition)


IDEs para Java

	--> NetBeans
	--> IntelliJ


Sintaxis

	--> Case sensitive: Distingue mayúsculas de minúsculas
	--> Cada línea finaliza con ;
	--> Principio y fin de cada estructura con llaves {}


Variables

	--> Entero: int
	--> Decimales: double
	--> Booleanos: boolean
	--> Caracteres: char('a', 'z')
	--> Cadena de caracteres: string ("Hello world 1,2,3")
	--> Entero largo: long (números entre: -9.223.372.036.854.775.808 	y -9.223.372.036.854.775.807)

	STRING NO ES CONSIDERADO UN TIPO PRIMITIVO DE JAVA --> Pregunta de 	entrevista laboral (es una CLASE)


Declaración de variable

	tipo de dato - número


Reglas para la declaración de variables
	--> No pueden iniciar con número
	--> No pueden utilizar caracteres especiales
	--> No space
	--> Distingue entre mayúsculas y minúsculas
	--> No utilizar palabras reservadas (double, int, for, private, etc.)
	--> Strig se declara con mayúscula al principio por ser una clase

CamelCase

	--> Cuando trabajamos con variables, todas las variables empiezan con let	minúscula (ejemplo --> tieneCarnet)
	--> Cuando trabajamos con Clases o nombres de proyectos es diferente 	(ejemplo --> TieneCarnet)


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Operadores

	--> Aritméticos (+ - * /)
	--> Relaciones ( == igual, > <  <= >= menor(igual) y mayor(igual) 	que, != distinto) 
	--> Condicionales (&& and, || o, ! NOT)

OJO: Java agarra el lenguaje de la máquina, es decir de nuestro pc (ejemplo: 2.5 teclado en inglés, 2,5 teclado en español)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Condicionales
	
	--> if 
	--> if else
	--> if else anidados => if else dentro de if o dentro de else (hasta 36 anidaciones)
	--> switch => Múltiples caminos a partir de la evaluación de una sola expresión/condición (se evalúa un valor simple)
	--> Operadores ternarios => Decisiones simples en una sola línea de código (variable = (condición) ? valor_si_verdadero : valor_si_falso;

NOTA: Seleccionar código, click derecho y format para identar mejor y ordenar código

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Estructuras repetitivas (Bucles)

	--> 2 tipos: Controlados por un contador - Controlados por un centinela
	--> do While: Estructura menos usada (la condición se evalúa al final, no al principio) ==> Se ejecuta al menos una vez (puede ser peligroso)
	--> While: Estructura más usada (la condición se evalúa al principio) => puede ejecutarse o no dependiendo de la condición
	--> For: Bucle controlado por contador por excelencia (ahorra código) su estructura es: inicialización, condición, modificación.\
	--> Bucles infinitos: se ejecuta infinita cantidad de veces

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Operadores especiales de la clase String

	--> equals (igual) => (if palabra.equals("Hola")
	--> not equals (diferente) => (!palabra.equals("Hola"))

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Arrays y Matrices
	--> se cuenta a partir de 0
	--> manera contigua
	--> Arrayslist son diferentes (se pueden modificar)
	--> arrays - vectores - matrices ==> tamaño fijo
	--> una vez definida la cantidad de los arrays, no se puede modificar
	--> Se guarda siempre el mismo tipo de dato
	--> Unidimensionales: Solo filas o solo columnas (vectores)
	--> Dimensionales: Filas y columnas (matrices)
	--> Matrices con mismo número de filas y columnas son matrices cuadradas
	--> ¿Cómo hacer para matrices no cuadradas? { 
         Basta con hacerle length a una fila de la matriz para obtener número de columnas
         así: matriz[0].length }

Error por desbordamiento
	--> Cuando queremos acceder a una posición de nuestro arreglo o matriz que no existe (ejemplo el array tiene 20 posiciones
	y queremos acceder a la posción 21) 
--------------------------------------------------------------------